#+TITLE: Yousef Ghazy's GNU Emacs Config
#+AUTHOR: Yousef Ghazy (Amun)
#+DESCRIPTION: My personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :TOC:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#load-evil-mode][Load Evil Mode]]
- [[#ivy-and-counsel][IVY AND COUNSEL]]
- [[#keybindings][Keybindings]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#custom-functions][CUSTOM FUNCTIONS]]
  - [[#evil-scroll][EVIL SCROLL]]
  - [[#evil-end-of-line][EVIL END OF LINE]]
  - [[#buffer-move][BUFFER MOVE]]
  - [[#reload-emacs][RELOAD EMACS]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#ligatures][Ligatures]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#theme][Theme]]
  - [[#options][options]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
  - [[#mode-line][Mode-line]]
  - [[#transparency][Transparency]]
  - [[#dashboard][Dashboard]]
  - [[#highlight-line][Highlight line]]
- [[#org-mode][ORG MODE]]
  - [[#org-requires][org requires]]
  - [[#enhancements][Enhancements]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#bullet-size][Bullet size]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
  - [[#disable-line-numbers][Disable line numbers]]
  - [[#org-keybindings][Org keybindings]]
  - [[#org-appear][org-appear]]
- [[#projectile][PROJECTILE]]
- [[#git][Git]]
- [[#dired][DIRED]]
- [[#sudo-edit][SUDO EDIT]]
- [[#which-key][WHICH-KEY]]
- [[#theme-1][THEME]]
  - [[#spacious-padding][spacious-padding]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-toggle]]
- [[#behaviour-tweaks][BEHAVIOUR TWEAKS]]
  - [[#pairs][pairs]]
  - [[#rainbow-mode][Rainbow mode]]
  - [[#junk-files][junk files]]
  - [[#set-zathura-as-the-default-pdf-viewer][Set zathura as the default PDF viewer]]
  - [[#copy-minibuffer][Copy minibuffer]]
  - [[#smooth-scrolling][Smooth scrolling]]
- [[#commenting][Commenting]]
- [[#programming][PROGRAMMING]]
  - [[#flycheck][Flycheck]]
  - [[#company][Company]]
  - [[#crafted-emacs][Crafted emacs]]
  - [[#lsp][Lsp]]
  - [[#formating][Formating]]
  - [[#racket][Racket]]
  - [[#agressive-indent][Agressive indent]]
  - [[#surround][Surround]]
  - [[#yuck][yuck]]
  - [[#c-programming][C Programming]]
  - [[#folding][Folding]]
  - [[#indent-guide][Indent guide]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Elpaca Package Manager
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"

  			                  :ref nil
  			                  :files (:defaults (:exclude "extensions"))
  			                  :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
  	             ((zerop (call-process "git" nil buffer t "clone"
  				                       (plist-get order :repo) repo)))
  	             ((zerop (call-process "git" nil buffer t "checkout"
  				                       (or (plist-get order :ref) "--"))))
  	             (emacs (concat invocation-directory invocation-name))
  	             ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
  				                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
  	             ((require 'elpaca))
  	             ((elpaca-generate-autoloads "elpaca" repo)))
            (kill-buffer buffer)
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))



;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :demand t)
;;(elpaca-wait)

;;Turns off elpaca-use-package-mode current declartion
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
;;(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

;; Don't install anything. Defer execution of BODY
;;(elpaca nil (message "deferred"))
(elpaca-use-package-mode) ;; enables :ensure in use-package to work with elpaca
#+end_src

** Load Evil Mode
#+begin_src emacs-lisp
;; Expands to: (elpaca evil (use-package evil :demand t))
;; Evil mode
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  :config
  (evil-mode)


  (define-key evil-normal-state-map (kbd "C-d") #'my/evil-scroll-down-and-center)
  (define-key evil-normal-state-map (kbd "C-u") #'my/evil-scroll-up-and-center)
  (define-key evil-visual-state-map (kbd "C-d") #'my/evil-scroll-down-and-center)
  (define-key evil-visual-state-map (kbd "C-u") #'my/evil-scroll-up-and-center)

  ;; Movement
  (define-key evil-normal-state-map (kbd "C-a") 'evil-first-non-blank)
  (define-key evil-normal-state-map (kbd "C-e") 'evil-end-of-line)
  (define-key evil-visual-state-map (kbd "C-a") 'evil-first-non-blank)
  (define-key evil-visual-state-map (kbd "C-e") #'my/evil-end-of-line)
  ;; ESC to quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (evil-set-undo-system 'undo-redo)
  )

;; Key-chord for jk escape
(use-package key-chord
  :ensure t
  :after evil
  :config
  (setq key-chord-two-keys-delay 2)
  (key-chord-mode 1)
  (with-eval-after-load 'evil
    (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)))

;; Evil extras
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
#+end_src

* IVY AND COUNSEL
#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :config (counsel-mode))

(use-package ivy
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode) 
  ;; Define the function to copy the file path
  (defun ivy-copy-file-path (file)
    "Copy the full path of the selected file in `counsel-find-file'."
    (kill-new (expand-file-name file ivy--directory))
    (message "Copied: %s" (expand-file-name file ivy--directory)))

  ;; Bind C-c to copy the path in Ivy minibuffer
  (with-eval-after-load 'ivy
    (define-key ivy-minibuffer-map (kbd "C-c")
                (lambda ()
                  (interactive)
                  (ivy-copy-file-path (ivy-state-current ivy-last))))))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
                          ivy-rich-switch-buffer-align-virtual-buffer t
                          ivy-rich-path-style 'abbrev))
;;:config
;;(ivy-set-display-transformer 'ivy-switch-buffer 'ivy-rich-switch-buffer-transformer))
#+end_src


* Keybindings
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)

  ;; set up 'SPC' as the global leader key
  (general-create-definer yousef/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (yousef/leader-keys
    "f f" '(find-file :wk "Find file")
    "f c" '((lambda () (interactive) (find-file "~/.emacs.d/config.org")) :wk "Edit emacs config")
    "f r" '(counsel-recentf :wk "Find recent files")
    "f m p" '((lambda () (interactive) (find-file "~/learning/roadmap.org")) :wk "Roadmap")
    "TAB TAB" '(comment-line :wk "Comment lines"))

  (yousef/leader-keys
    "b" '(:ignore t :wk "buffer")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" #'(lambda () (interactive) (kill-buffer (current-buffer)))
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer"))

  (yousef/leader-keys
    "e" '(:ignore t :wk "Evaluate")    
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e h" '(counsel-esh-history :which-key "Eshell history")
    "e s" '(eshell :which-key "Eshell")
    "e r" '(eval-region :wk "Evaluate elisp in region")) 

  (yousef/leader-keys
    "h" '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable")
    "h k" '(describe-key :wk "Describe key")
    ;;"h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config"))
    "h r r" '(reload-init-file :wk "Reload emacs config"))

  (yousef/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    "t v" '(vterm-toggle :wk "Toggle vterm"))

  (yousef/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open dired")
    "d j" '(dired-jump :wk "Dired jump to current"))

  (yousef/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))
  )
(global-set-key (kbd "C-s") 'swiper)
#+end_src

* ALL THE ICONS
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* CUSTOM FUNCTIONS
** EVIL SCROLL
#+begin_src emacs-lisp
;; Scroll and recenter
(defun my/evil-scroll-down-and-center ()
  (interactive)
  (evil-scroll-down nil)
  (recenter))

(defun my/evil-scroll-up-and-center ()
  (interactive)
  (evil-scroll-up nil)
  (recenter))
#+end_src

** EVIL END OF LINE
#+begin_src emacs-lisp
(defun my/evil-end-of-line ()
  (interactive)
  (evil-end-of-line)
  (evil-backward-char))
#+end_src

** BUFFER MOVE
#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
  ;;  "Switches between the current buffer, and the buffer above the
  ;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	     (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
  "Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	     (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
  "Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	     (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
  "Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	     (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

** RELOAD EMACS
This is just an example of how to create a simple function in Emacs.  Use this function to reload Emacs after adding changes to the config.  Yes, I am loading the user-init-file twice in this function, which is a hack because for some reason, just loading the user-init-file once does not work properly.

#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))
#+end_src

* FONTS
Defining the various fonts that Emacs will use.
** Setting the Font Face
#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :font "JetBrains Mono"
                    :height 115
                    :weight 'medium)
(set-face-attribute 'variable-pitch nil
                    :font "JetBrains Mono"
                    :height 115
                    :weight 'medium)
(set-face-attribute 'fixed-pitch nil
                    :font "JetBrains Mono"
                    :height 115
                    :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
                    :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
                    :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
#+end_src

** Ligatures
#+begin_src emacs-lisp
(use-package ligature
  :ensure t
  :config
  (ligature-set-ligatures 'prog-mode
                          '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "||=" "||>"
                            ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                            "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                            "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                            "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                            "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                            "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                            "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                            ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                            "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                            "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                            "?=" "?." "//" "__" "~~" "(*" "*)"))
  (global-ligature-mode t))

#+end_src

** Zooming In/Out
You can use the bindings CTRL plus =/- for zooming in/out.  You can also use CTRL plus the mouse wheel for zooming in/out.

#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* GRAPHICAL USER INTERFACE TWEAKS
Let's make GNU Emacs look a little better.
** Theme
#+begin_src emacs-lisp

(use-package ef-themes
  :config
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(custom-enabled-themes '(ef-dark))
   '(custom-safe-themes
     '("1ad12cda71588cc82e74f1cabeed99705c6a60d23ee1bb355c293ba9c000d4ac"
       default)))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(internal-border ((t (:background "#000000"))))
   '(org-block ((t (:background "#000000" :extend t))))
   '(org-block-begin-line ((t (:background "#000000" :extend t))))
   '(org-block-end-line ((t (:background "#000000" :extend t))))
   '(org-level-1 ((t (:inherit outline-1 :height 2.0))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.8))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.6))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.4))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.2))))))
#+end_src
** options
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(menu-bar-mode 0)
(scroll-bar-mode 0)
(tool-bar-mode 0)
(setq-default indent-tabs-mode nil)  ;; Disable tabs (use spaces instead)
(setq-default tab-width 4)           ;; Set tab width to 4 spaces
(setq-default standard-indent 4)     ;; Set standard indentation to 4 spaces
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
(global-display-line-numbers-mode t)
(setq display-line-numbers-type 'relative
      display-line-numbers-width 3)
(global-visual-line-mode t)
#+end_src

** Mode-line
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init
  (doom-modeline-mode 1)
  :config
  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (with-selected-frame frame
                (doom-modeline-mode 1))))
  (setq doom-modeline-buffer-file-name-style 'truncate-nil)
  (setq doom-modeline-total-line-number t))

(use-package nyan-mode
  :init (nyan-mode))
#+end_src

** Transparency
#+begin_src emacs-lisp
(set-frame-parameter nil 'alpha-background 100) ; For current frame
(add-to-list 'default-frame-alist '(alpha-background . 100)) ; For all new frames henceforth
#+end_src

** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Welcome Home...")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner "/home/yousef/.emacs.d/images/image.jpg")  ;; use custom image as banner
  (setq dashboard-center-content t) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))
#+end_src

** Highlight line
#+begin_src emacs-lisp
(global-hl-line-mode t)
#+end_src>

* ORG MODE
** org requires
#+begin_src emacs-lisp
(setq org-agenda-files '("~/org"))
#+end_src

** Enhancements
#+begin_src emacs-lisp
  (setq org-ellipsis " ▾")
  (setq org-hide-emphasis-markers t)
#+end_src

** Enabling Table of Contents
#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Bullet size
#+begin_src emacs-lisp
;;(custom-set-faces
;;custom-set-faces was added by Custom.
;;If you edit it by hand, you could mess it up, so be careful.
;;Your init file should contain only one such instance.
;;If there is more than one, they won't work right.
;;'(internal-border ((t (:background "#000000"))))
;;'(org-level-1 ((t (:inherit outline-1 :height 2.0))))
;;'(org-level-2 ((t (:inherit outline-2 :height 1.8))))
;;'(org-level-3 ((t (:inherit outline-3 :height 1.6))))
;;'(org-level-4 ((t (:inherit outline-4 :height 1.4))))
;;'(org-level-5 ((t (:inherit outline-5 :height 1.2)))))
#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src

** Disable line numbers
#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda () (display-line-numbers-mode -1)))
#+end_src

** Org keybindings
#+begin_src emacs-lisp
(with-eval-after-load 'evil
  (evil-define-key 'normal org-mode-map (kbd "TAB") #'org-cycle) 
  (evil-define-key 'insert org-mode-map (kbd "TAB") #'org-cycle))
#+end_src

** org-appear
#+begin_src emacs-lisp
(use-package org-appear
  :config
    (add-hook 'org-mode-hook 'org-appear-mode))
#+end_src

* PROJECTILE
#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-mode 1))
#+end_src

* Git
#+begin_src emacs-lisp
(use-package transient)
(use-package magit
  :ensure t)
(use-package git-gutter
  :config
  (global-git-gutter-mode +1))
#+end_src

* DIRED
#+begin_src emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv")
                                ("pdf" . "zathura"))))
#+end_src

* SUDO EDIT
[[https://github.com/nflath/sudo-edit][sudo-edit]] gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.

#+begin_src emacs-lisp
(use-package sudo-edit
  :config
  (yousef/leader-keys
    "fu" '(sudo-edit-find-file :wk "Sudo find file")
    "fU" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit nil
        which-key-separator " → " ))
#+end_src

* THEME
** spacious-padding
#+begin_src emacs-lisp
(use-package spacious-padding
  :after ef-themes
  :config (spacious-padding-mode 1))
(setq spacious-padding-widths
      '( :internal-border-width 30
         :header-line-width 2
         :mode-line-width 12
         :tab-width 6
         :right-divider-width 30
         :scroll-bar-width 15
         :fringe-width 20))
(let ((bg (face-background 'default)))
  (custom-set-faces
   `(internal-border ((t (:background ,bg))))
   `(fringe ((t (:background ,bg))))))
(let ((bg (face-attribute 'default :background)))
  (custom-set-faces
   `(internal-border ((t (:background ,bg :foreground ,bg))))))

;; Read the doc string of `spacious-padding-subtle-mode-line' as it
;; is very flexible and provides several examples.
(setq spacious-padding-subtle-mode-line
      `( :mode-line-active 'default
         :mode-line-inactive vertical-border))

(define-key global-map (kbd "<f8>") #'spacious-padding-mode)
#+end_src

* SHELLS AND TERMINALS
** Eshell
#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (add-hook 'eshell-mode-hook
            (lambda ()
              (define-key eshell-mode-map (kbd "M-j") 'eshell-next-input)    ; newer command
              (define-key eshell-mode-map (kbd "M-k") 'eshell-previous-input) ; older command
              ))
  (eshell-syntax-highlighting-global-mode +1))

;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
;; eshell-aliases-file -- sets an aliases file for the eshell.

(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
(add-hook 'eshell-mode-hook
          (lambda ()
            (when (get-buffer-process (current-buffer))
              (goto-char (point-max)))))
(use-package esh-autosuggest  ; Install via MELPA
  :hook (eshell-mode . esh-autosuggest-mode)
  :config
  (define-key eshell-mode-map (kbd "M-j") 'esh-autosuggest-next)
  (define-key eshell-mode-map (kbd "M-k") 'esh-autosuggest-previous))
#+end_src

** Vterm
#+begin_src emacs-lisp
(use-package vterm
  :config
  (setq shell-file-name "/usr/bin/sh"
        vterm-max-scrollback 5000))
#+end_src

** Vterm-toggle
#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                   (let ((buffer (get-buffer buffer-or-name)))
                     (with-current-buffer buffer
                       (or (equal major-mode 'vterm-mode)
                           (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                 (display-buffer-reuse-window display-buffer-at-bottom)
                 ;;(display-buffer-reuse-window display-buffer-in-direction)
                 ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                 ;;(direction . bottom)
                 ;;(dedicated . t) ;dedicated is supported in emacs27
                 (reusable-frames . visible)
                 (window-height . 0.3))))
#+end_src

* BEHAVIOUR TWEAKS
** pairs
#+begin_src emacs-lisp
(electric-pair-mode)
(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.
(use-package rainbow-delimiters
  :ensure t 
  :hook (prog-mode . rainbow-delimiters-mode)
  :config
  (message "Rainbow delimiters loaded in programming buffers"))
#+end_src

** Rainbow mode
#+begin_src emacs-lisp
(use-package rainbow-mode)
#+end_src

** junk files
#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
(setq auto-save-file-name-transforms '((".*" "~/.local/share/Trash/files/" t)))
#+end_src

** Set zathura as the default PDF viewer
#+begin_src emacs-lisp
(setq org-file-apps
      '((auto-mode . emacs)
        ("\\.pdf\\'" . "zathura %s")))
#+end_src

** Copy minibuffer
#+begin_src emacs-lisp
(with-eval-after-load 'ivy
  (define-key ivy-minibuffer-map (kbd "C-c")
              (lambda ()
                (interactive)
                (ivy-copy-file-path (ivy-state-current ivy-last)))))
#+end_src

** Smooth scrolling
#+begin_src emacs-lisp
(setq scroll-step 1
      scroll-margin 5
      scroll-conservatively 10000
      scroll-preserve-screen-position t)
(pixel-scroll-precision-mode t)
#+end_src

* Commenting
#+begin_src emacs-lisp

#+end_src

* PROGRAMMING
** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))
#+end_src

** Company
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :hook (after-init . global-company-mode)
  :config
  ;; Core settings
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.1
        company-selection-wrap-around t
        company-show-numbers t
        company-tooltip-limit 10
        company-require-match 'never)

  ;; UI Enhancements
  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode)
    :config
    (setq company-box-icons-alist 'company-box-icons-all-the-icons
          company-box-show-single-candidate t
          company-box-max-candidates 10))

  ;; Keybindings
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous)
    (define-key company-active-map (kbd "C-y") 'company-complete-selection)))

#+end_src

** Crafted emacs
#+begin_src emacs-lisp
;;(load "~/.emacs.d/crafted-emacs/modules/crafted-init-config")
#+end_src

** Lsp
#+begin_src emacs-lisp
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (racket-mode . lsp)
         (python-mode . lsp)
         (c++-mode . lsp)
         (c-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)
;; optionally
(use-package lsp-ui :commands lsp-ui-mode)
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+end_src

** Formating
#+begin_src emacs-lisp
(use-package clang-format
  :config
  (setq clang-format-executable "/usr/bin/clang-format"))
#+end_src

** Racket 
#+begin_src emacs-lisp
(use-package racket-mode)
#+end_src

** Agressive indent
#+begin_src emacs-lisp
(use-package aggressive-indent
  :init (aggressive-indent-mode))
#+end_src

** Surround
#+begin_src emacs-lisp
(use-package evil-surround
  :ensure t
  :after evil
  :config
  ;; Define our desired pairs without spaces
  (defconst my/evil-surround-pairs
    '((?\( . ("(" . ")"))
      (?\[ . ("[" . "]"))
      (?\{ . ("{" . "}"))
      (?\) . ("(" . ")"))
      (?\] . ("[" . "]"))
      (?\} . ("{" . "}"))))
  
  ;; Define our operator behavior without spaces
  (defconst my/evil-surround-operators
    (mapcar (lambda (entry)
              (if (member (car entry) '(?\( ?\[ ?\{ ?\) ?\] ?\}))
                  (cons (car entry) (cons "" ""))  ; No spaces
                entry))
            evil-surround-operator-alist))
  
  ;; Function to force our settings
  (defun my/apply-evil-surround-settings ()
    (setq-local evil-surround-pairs-alist my/evil-surround-pairs)
    (setq-local evil-surround-operator-alist my/evil-surround-operators))
  
  ;; Apply to all existing and future buffers
  (add-hook 'evil-surround-mode-hook 'my/apply-evil-surround-settings)
  (add-hook 'after-change-major-mode-hook 'my/apply-evil-surround-settings)
  
  ;; Initialize in all current buffers
  (dolist (buf (buffer-list))
    (with-current-buffer buf
      (when (bound-and-true-p evil-surround-mode)
        (my/apply-evil-surround-settings))))
  
  (global-evil-surround-mode 1))
#+end_src

** yuck
#+begin_src emacs-lisp
(use-package yuck-mode)
#+end_src

** C Programming
#+begin_src emacs-lisp
;; Set C-style indentation to 4 spaces
;;(setq c-default-style "linux")  ; Uses 8 spaces by default, but we'll override
;;(setq c-basic-offset 4)         ; Force 4 spaces for all C indentation
;; C/C++ Indentation
(add-hook 'c-mode-common-hook
          (lambda ()
            (setq c-default-style "linux")
            (setq c-basic-offset 4)
            (setq c++-default-style "linux")
            (setq c++-basic-offset 4)
            (c-set-offset 'substatement-open 0)  ; Align braces with control statements
            (electric-indent-local-mode 1)))     ; Auto-indent
#+end_src

** Folding 
#+begin_src emacs-lisp
(defun toggle-fold ()
  (interactive)
  (save-excursion
    (end-of-line)
    (hs-toggle-hiding)))
(with-eval-after-load 'evil
(define-key evil-normal-state-map (kbd "zc") 'toggle-fold))
#+end_src

** Indent guide
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :ensure t
  :hook (prog-mode . highlight-indent-guides-mode)
  :config
  ;; Method 1: Use a visible face (gray lines)
  (setq highlight-indent-guides-method 'fill)  ; Solid color bars

  ;; OR Method 2: Use Unicode chars with foreground color
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-character ?│))  ; Unicode line (or ?┆, ?▏)

(with-eval-after-load 'highlight-indent-guides
    (set-face-background 'highlight-indent-guides-odd-face  "#000000") ; Dark gray
  (set-face-background 'highlight-indent-guides-even-face "#000000")) ; Lighter gray
#+end_src
